name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      IMAGE_URI: ${{ steps.set-image-uri.outputs.IMAGE_URI }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1   # public ECR is always us-east-1

      - name: Login to Amazon Public ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 \
            | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build Docker Image
        run: |
          IMAGE_URI="${{ secrets.AWS_IMAGE_URI}}"
          docker build -t $IMAGE_URI:${{ github.run_number }} .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: "${{ secrets.AWS_IMAGE_URI }}:${{ github.run_number }}"
          format: 'table'
          exit-code: '0'       # Do NOT fail pipeline on HIGH/CRITICAL
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push image to Amazon Public ECR
        run: |
          IMAGE_URI="${{ secrets.AWS_IMAGE_URI}}"
          IMAGE_TAG="${{ github.run_number }}"
          # push both versioned and latest
          docker push $IMAGE_URI:$IMAGE_TAG
          docker tag $IMAGE_URI:$IMAGE_TAG $IMAGE_URI:latest
          docker push $IMAGE_URI:latest

      # - name: Set image URI output
      #   id: set-image-uri
      #   run: echo "IMAGE_URI=public.ecr.aws/xxxxxxx/my-portfolio" >> $GITHUB_OUTPUT

  # deploy-ec2:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Deploy to EC2 via SSH
  #       uses: appleboy/ssh-action@v1
  #       with:
  #         host: ${{ secrets.EC2_HOST }}          # Public IP or DNS
  #         username: ${{ secrets.EC2_USER }}      # e.g., "ubuntu" or "ec2-user"
  #         key: ${{ secrets.EC2_SSH_KEY }}        # Private key from GitHub Secrets
  #         script: |
  #           IMAGE_URI="${{ secrets.AWS_IMAGE_URI}}"
  #           IMAGE_TAG=${{ github.run_number }}
  #
  #           # Authenticate to ECR
  #           aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $IMAGE_URI
  #
  #           # Pull new image
  #           docker pull $IMAGE_URI:$IMAGE_TAG
  #
  #           # Stop old container
  #           docker rm -f my-portfolio || true
  #
  #           # Run new container
  #           docker run -d --name my-portfolio -p 8080:5001 $IMAGE_URI:$IMAGE_TAG
  #
  #           # Verify
  #           docker ps
