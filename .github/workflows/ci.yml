name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      IMAGE_URI: ${{ steps.set-image-uri.outputs.IMAGE_URI }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: private

      - name: Build Docker Image
        run: |
          IMAGE_URI="${{ secrets.AWS_IMAGE_URI }}"
          docker build -t $IMAGE_URI:${{ github.run_number }} .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: "${{ secrets.AWS_IMAGE_URI }}:${{ github.run_number }}"
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push image to Amazon ECR
        run: |
          IMAGE_URI="${{ secrets.AWS_IMAGE_URI }}"
          IMAGE_TAG="${{ github.run_number }}"
          # push both versioned and latest
          docker push $IMAGE_URI:$IMAGE_TAG
          docker tag $IMAGE_URI:$IMAGE_TAG $IMAGE_URI:latest
          docker push $IMAGE_URI:latest

      - name: Set image URI output
        id: set-image-uri
        run: |
          echo "IMAGE_URI=${{ secrets.AWS_IMAGE_URI }}:${{ github.run_number }}" >> $GITHUB_OUTPUT
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true